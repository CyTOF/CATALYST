text=row_anno_text(freq_labs),
width=max_text_width(freq_labs))
} else {
freq_anno <- NULL
}
p <- merging_anno + cluster_anno + hm1 + freq_bars + freq_anno
scaled <- TRUE
k <- as.character(k)
if (!is.null(m)) {
check_validity_of_k(x, m)
m <- as.character(m)
}
es <- exprs(x)
cluster_ids <- factor(cluster_codes(x)[, k][cluster_ids(x)])
n_clusters <- nlevels(cluster_ids)
# compute medians across clusters
med_exprs <- data.frame(es, cluster_id=cluster_ids) %>%
group_by(cluster_id) %>% summarize_all(funs(median))
# cluster based on markers used for clustering
d <- stats::dist(med_exprs[, type1(x)], method="euclidean")
row_clustering <- hclust(d, method="average")
# row labels and cluster annotations
row_anno <- levels(cluster_ids)
row_cols <- cluster_cols[seq_len(n_clusters)]
names(row_cols) <- row_anno
cluster_anno <- Heatmap(row_anno, row_cols, "cluster_id",
cluster_rows=row_clustering, cluster_columns=FALSE,
row_dend_reorder=FALSE, width=unit(.5, "cm"))
# merging annotation
merging_anno <- NULL
if (!is.null(m)) {
merging_ids <- factor(cluster_codes(x)[, m])[
match(seq_len(n_clusters), cluster_codes(x)[, k])]
merging_cols <- cluster_cols[seq_len(nlevels(merging_ids))]
names(merging_cols) <- levels(merging_ids)
merging_anno <- Heatmap(merging_ids, merging_cols, "merging_id",
cluster_rows=row_clustering, cluster_columns=FALSE,
row_dend_reorder=FALSE, width=unit(.5, "cm"))
}
# left-hand side heatmap:
# type 1 median marker expressions across clusters
hm_cols <- colorRampPalette(rev(brewer.pal(9, "RdYlBu")))(100)
if (scaled) {
es0 <- scale_exprs(es)
hm1_exprs <- data.frame(es0, cluster_id=cluster_ids) %>%
group_by(cluster_id) %>% summarize_all(funs(median))
hm2_exprs <- es0
} else {
hm1_exprs <- med_exprs
hm2_exprs <- es
}
hm1 <- Heatmap(hm1_exprs[, type1(x)], hm_cols,
paste0("scaled\n"[TRUE], "expression"),
column_names_gp=gpar(fontsize=8),
cluster_rows=row_clustering, cluster_columns=FALSE,
heatmap_legend_param=list(color_bar="continuous"))
# compute cluster frequencies
counts <- as.numeric(table(cluster_ids))
freqs <- round(counts/sum(counts)*100, 2)
if (freq_bars) {
freq_bars <- rowAnnotation(width=unit(2, "cm"), "Frequency [%]"=
row_anno_barplot(x=freqs, border=FALSE, axis=TRUE,
gp=gpar(fill="grey50", col="white"), bar_with=.75))
} else {
freq_bars <- NULL
}
if (freq_labs) {
freq_labs <- paste0(row_anno, " (", freqs, "%)")
freq_anno <- rowAnnotation(
text=row_anno_text(freq_labs),
width=max_text_width(freq_labs))
} else {
freq_anno <- NULL
}
p <- merging_anno + cluster_anno + hm1 + freq_bars + freq_anno
hm_cols <- colorRampPalette(rev(brewer.pal(9, "RdYlBu")))(100)
scaled
es0 <- scale_exprs(es)
hm1_exprs <- data.frame(es0, cluster_id=cluster_ids) %>%
group_by(cluster_id) %>% summarize_all(funs(median))
es0
rownames(es0)
es
es0 <- scale_exprs(es)
rownames(es0)
x <- es
qs <- matrixStats::colQuantiles(x, probs=c(.01, .99))
x_scaled <- t((t(x) - qs[, 1]) / (qs[, 2] - qs[, 1]))
x_scaled[x_scaled < 0] <- 0
x_scaled[x_scaled > 1] <- 1
class(x_scaled)
colnames(x_scaled)
rownames(x_scaled)
qs <- matrixStats::colQuantiles(x, probs=c(.01, .99))
x_scaled <- t((t(x) - qs[, 1]) / (qs[, 2] - qs[, 1]))
rownames(x_scaled)
x
x <- es
rownames(x)
es <- exprs(x)
x <- re
es <- exprs(x)
rownames(es)
x
assays(re)$es
colnames(assays(re)$es)
rownames(assays(re)$es)
class(assays(object)$es)
class(assays(re)$es)
plotClusterHeatmap(re, hm2="type2", k=12)
library(CATALYST)
warnings()
hm1_exprs <- data.frame(es0, cluster_id=cluster_ids) %>%
group_by(cluster_id) %>% summarize_all(funs(median))
es <- exprs(x)
es0 <- scale_exprs(es)
hm1_exprs <- data.frame(es0, cluster_id=cluster_ids) %>%
group_by(cluster_id) %>% summarize_all(funs(median))
stop("Invalid argument 'cols_to_use'. Should be",
"a logial vector, a numeric vector of indices, or",
"a character vector of column names.")
stop("Invalid argument 'cols_to_use'.\nShould be",
"a logial vector, a numeric vector of indices, or",
"a character vector of column names.")
stop("Invalid argument 'cols_to_use'.\nShould be either",
"a logial vector, a numeric vector of indices, or",
"a character vector of column names.")
stop("Invalid argument 'cols_to_use'.\nShould be either",
" a logial vector, a numeric vector of indices, or",
" a character vector of column names.")
fs
fs <- PBMC_fs
cols_to_use <- c(0,5)
chs <- flowCore::colnames(fs)
min(cols_to_use >= 1)
check3 <- min(cols_to_use >= 1) && max(cols_to_use <= ncol) &&
length(unique(cols_to_use)) == length(cols_to_use)
check3
cols_to_use <- c(1,1)
check3 <-
check3 <- min(cols_to_use >= 1) && max(cols_to_use <= ncol) &&
length(unique(cols_to_use)) == length(cols_to_use)
ncol <- 2
check3 <-
check3 <- min(cols_to_use >= 1) && max(cols_to_use <= ncol) &&
length(unique(cols_to_use)) == length(cols_to_use)
check3
stop("Invalid argument 'cols_to_use'.\nShould be either",
" a logial vector, a numeric vector of indices, or",
" a character vector of column names.")
if (!(check1 | check2 | check3))
stop("Invalid argument 'cols_to_use'.\nShould be either",
" a logial vector, a numeric vector of indices, or",
" a character vector of column names.")
n_cols <- length(col_nms)
check1 <- is.logical(cols_to_use) & length(cols_to_use) == n_cols
check2 <- all(cols_to_use %in% col_nms)
col_nms <- chs
n_cols <- length(col_nms)
check1 <- is.logical(cols_to_use) & length(cols_to_use) == n_cols
check2 <- all(cols_to_use %in% col_nms)
check3 <- FALSE
if (is.integer(x))
check3 <- min(cols_to_use >= 1) && max(cols_to_use <= ncol)
if (!(check1 | check2 | check3))
stop("Invalid argument 'cols_to_use'.\nShould be either",
" a logial vector, a numeric vector of indices, or",
" a character vector of column names.")
check3
check2
check1
cols_to_use <- NULL
n_cols <- length(col_nms)
check1 <- is.logical(cols_to_use) & length(cols_to_use) == n_cols
check2 <- all(cols_to_use %in% col_nms)
check3 <- FALSE
if (is.integer(x))
check3 <- min(cols_to_use >= 1) && max(cols_to_use <= ncol)
check3
check2
cols_to_use
col_nms
cols_to_use
chs
check_validity_columns(cols_to_use, chs)
check_validity_columns <- function(cols_to_use, col_nms) {
n_cols <- length(col_nms)
check1 <- is.logical(cols_to_use) & length(cols_to_use) == n_cols
check2 <- all(cols_to_use %in% col_nms)
check3 <- FALSE
if (is.integer(x))
check3 <- min(cols_to_use >= 1) && max(cols_to_use <= ncol)
if (!(check1 | check2 | check3))
stop("Invalid argument 'cols_to_use'.\nShould be either",
" a logial vector, a numeric vector of indices, or",
" a character vector of column names.")
}
check_validity_cols_to_use(cols_to_use, chs)
check_validity_cols_to_use <- function(cols_to_use, col_nms) {
n_cols <- length(col_nms)
check1 <- is.logical(cols_to_use) & length(cols_to_use) == n_cols
check2 <- all(cols_to_use %in% col_nms)
check3 <- FALSE
if (is.integer(x))
check3 <- min(cols_to_use >= 1) && max(cols_to_use <= ncol)
if (!(check1 | check2 | check3))
stop("Invalid argument 'cols_to_use'.\nShould be either",
" a logial vector, a numeric vector of indices, or",
" a character vector of column names.")
}
check_validity_cols_to_use(cols_to_use, chs)
exprs_colname
check_validity_cols <- function(cols_to_use, col_nms) {
n_cols <- length(col_nms)
check1 <- is.logical(cols_to_use) & length(cols_to_use) == n_cols
check2 <- all(cols_to_use %in% col_nms)
check3 <- FALSE
if (is.integer(x))
check3 <- min(cols_to_use >= 1) && max(cols_to_use <= ncol)
if (!(check1 | check2 | check3))
stop("Invalid argument 'cols_to_use'.\nShould be either",
" a logial vector, a numeric vector of indices, or",
" a character vector of column names.")
}
check_validity_cols <- function(cols_to_use, col_nms) {
n_cols <- length(col_nms)
check1 <- is.logical(cols_to_use) & length(cols_to_use) == n_cols
check2 <- all(cols_to_use %in% col_nms)
check3 <- FALSE
if (is.integer(x))
check3 <- min(cols_to_use >= 1) && max(cols_to_use <= ncol)
if (!(check1 | check2 | check3))
stop("Invalid argument 'cols_to_use'.\nShould be either",
" a logial vector, a numeric vector of indices, or",
" a character vector of column names.")
}
list(a=5, b="test")
list(sample_id="sample_id", antigen="antigen")
cols <- list(sample_id="sample_id", antigen="antigen")
cols$antigen
check_validity_cols(cols$antigen, colnames(panel))
panel <- PBMC_panel
check_validity_cols(cols$antigen, colnames(panel))
colnames(panel)
md <- PBMC_md
md[["sample_id"]]
cols=list(id="sample_id", antigen="antigen", factor="condition")
md[[cols$id]]
md
factors <- c("condition1", "condition2")
md[[i]]
i <- factors[1]
md[[i]]
i
md[i]
md
factors <- c("patiend_id", "condition")
i <- factors[1]
nd[[i]]
md[[i]]
md[i]
md
i
md[[cols$id]]
cols$id
i
md[[i]]
md
colnames(md)
md[["condition"]]
md[[patient_id]]
md[["patiend_id"]]
md[["patiendt_id"]]
md[["patient_id"]]
daFrame <- function(fs, panel, md, cols_to_use=NULL, cofactor=5,
panel_cols=list(channel="fcs_colname", antigen="antigen"),
md_cols=list(file="file_name", id="sample_id", factors="condition")) {
# set/check colnames of panel
chs <- flowCore::colnames(fs)
if (is.null(cols_to_use))
cols_to_use <- chs
check_validity_cols(cols_to_use, chs)
# replace problematic characters
check_validity_cols(panel_cols$channel, colnames(panel))
check_validity_cols(panel_cols$antigen, colnames(panel))
antigens <- gsub("-", "_", panel[[panel_cols$antigen]])
# arcsinh-transformation & column subsetting
fs <- fs[, cols_to_use]
fs <- fsApply(fs, function(ff) {
flowCore::exprs(ff) <- asinh(exprs(ff)/cofactor)
return(ff)
})
md <- data.frame(md)
chs <- flowCore::colnames(fs)
m1 <- match(panel[[panel_cols$channel]], chs, nomatch=0)
m2 <- match(chs, panel[[panel_cols$channel]])
flowCore::colnames(fs)[m1] <- antigens[m2]
es <- matrix(fsApply(fs, exprs),
ncol=length(chs),
dimnames=list(NULL, flowCore::colnames(fs)))
n_events <- fsApply(fs, nrow)
n_events <- setNames(as.numeric(n_events), md_cols$id)
# construct SummarizedExperiment
row_data <- S4Vectors::DataFrame(
sample_id=rep(md[[md_cols$id]], n_events),
sapply(md_cols$factors, function(i) rep(md[[i]], n_events)))
col_data <- S4Vectors::DataFrame(channel=chs, row.names=colnames(es))
new("daFrame",
SummarizedExperiment(
assays=SimpleList(es=es),
rowData=row_data, colData=col_data,
metadata=list(design=md, n_events=n_events)))
}
dbFrame(PBMC_fs, PBMC_panel, PBMC_md)
daFrame(PBMC_fs, PBMC_panel, PBMC_md)
library(flowCore)
daFrame(PBMC_fs, PBMC_panel, PBMC_md)
se <- daFrame(PBMC_fs, PBMC_panel, PBMC_md)
metadata(se)
md_cols
md_cols=list(file="file_name", id="sample_id", factors="condition")
md_cols$id
daFrame <- function(fs, panel, md, cols_to_use=NULL, cofactor=5,
panel_cols=list(channel="fcs_colname", antigen="antigen"),
md_cols=list(file="file_name", id="sample_id", factors="condition")) {
# set/check colnames of panel
chs <- flowCore::colnames(fs)
if (is.null(cols_to_use))
cols_to_use <- chs
check_validity_cols(cols_to_use, chs)
# replace problematic characters
check_validity_cols(panel_cols$channel, colnames(panel))
check_validity_cols(panel_cols$antigen, colnames(panel))
antigens <- gsub("-", "_", panel[[panel_cols$antigen]])
# arcsinh-transformation & column subsetting
fs <- fs[, cols_to_use]
fs <- fsApply(fs, function(ff) {
flowCore::exprs(ff) <- asinh(exprs(ff)/cofactor)
return(ff)
})
md <- data.frame(md)
chs <- flowCore::colnames(fs)
m1 <- match(panel[[panel_cols$channel]], chs, nomatch=0)
m2 <- match(chs, panel[[panel_cols$channel]])
flowCore::colnames(fs)[m1] <- antigens[m2]
es <- matrix(fsApply(fs, exprs),
ncol=length(chs),
dimnames=list(NULL, flowCore::colnames(fs)))
n_events <- fsApply(fs, nrow)
n_events <- setNames(as.numeric(n_events), md[[md_cols$id]])
# construct SummarizedExperiment
row_data <- S4Vectors::DataFrame(
sample_id=rep(md[[md_cols$id]], n_events),
sapply(md_cols$factors, function(i) rep(md[[i]], n_events)))
col_data <- S4Vectors::DataFrame(channel=chs, row.names=colnames(es))
new("daFrame",
SummarizedExperiment(
assays=SimpleList(es=es),
rowData=row_data, colData=col_data,
metadata=list(design=md, n_events=n_events)))
}
se <- daFrame(PBMC_fs, PBMC_panel, PBMC_md)
se
metadata(se)
check_validity_cols(c("antigen", "fcs_colame"), colnames(PBMC_panel))
check_validity_cols("antigen", colnames(PBMC_panel))
colnames(PBMC_panel)
panel_cols
panel_cols=list(channel="fcs_colname", antigen="antigen")
panel_cols=c(channel="fcs_colname", antigen="antigen")
panel_cols$antigen
panel_cols=list(channel="fcs_colname", antigen="antigen")
panel_cols$antigen
panel_cols
panel
check_validity_cols(unlist(panel_cols), colnames(panel))
check_validity_cols
check_validity_cols(unlist(md_cols), colnames(md))
md_cols
md
md2 <- md
md2$condition2 <- md2$condition
daFrame(PBMC_fs, PCBM_panel, PBMC_md md_cols=list(file="file_name", id="sample_id", factors=c("condition", "condition2")))
daFrame(PBMC_fs, PCBM_panel, PBMC_md, md_cols=list(file="file_name", id="sample_id", factors=c("condition", "condition2")))
daFrame(PBMC_fs, PBMC_panel, PBMC_md, md_cols=list(file="file_name", id="sample_id", factors=c("condition", "condition2")))
list(file="file_name", id="sample_id", factors=c("condition", "condition2"))
md[[md_cols$id]]
md_cols$factors
md_cols
md_cols <- list(file="file_name", id="sample_id", factors=c("condition", "condition2"))
md_cols
rep(md[[md_cols$id]], n_events)
md_cols$id
md[[md_cols$id]]
n_events
n_events <- fsApply(fs, nrow)
n_events <- setNames(as.numeric(n_events), md[[md_cols$id]])
row_data <- S4Vectors::DataFrame(
sample_id=rep(md[[md_cols$id]], n_events),
sapply(md_cols$factors, function(i) rep(md[[i]], n_events)))
rep(md[[md_cols$id]], n_events)
md_cols$factors
sapply(md_cols$factors, function(i) rep(md[[i]], n_events))
md
sapply(md_cols$factors, function(i) rep(md[[i]], n_events))
daFrame(PBMC_fs, PBMC_panel, md2, md_cols=list(file="file_name", id="sample_id", factors=c("condition", "condition2")))
?list
identical(names(panel_cols), c("channel", "antigen"))
names(panel_cols)
identical(names(panel_cols), c("antigen", "channel"))
all(c("channel", "antigen") %in% names(panel_cols))
all(c("Channel", "antigen") %in% names(panel_cols))
all(c("channel", "antigen") %in% tolower(names(panel_cols)))
names(panel_cols) <- NULL
tolower(names(panel_cols))
all(c("channel", "antigen") %in% tolower(names(panel_cols)))
panel_cols
nms <- c("channel", "antigen")
if (!all(nms %in% tolower(names(panel_cols))))
stop("Invalid argument 'panel_cols'. List element should be named",
paste(dQuote(nms), collapse=", "))
if (!all(nms %in% tolower(names(panel_cols))))
stop("Invalid argument 'panel_cols'.\n",
"List elements should be named",
paste(dQuote(nms), collapse=", "))
stop("Invalid argument 'panel_cols'.\n List elements should be named ",
paste(dQuote(nms), collapse=", "))
stop("Invalid argument 'panel_cols'.\nList elements should be named ",
paste(dQuote(nms), collapse=", "))
nms <- c("file", "id", "factors")
if (!all(nms %in% tolower(names(md_cols))))
stop("Invalid argument 'panel_cols'.\nList elements should be named ",
paste(dQuote(nms), collapse=", "))
md_cols
names(id_cols)[2]
names(md_cols)[2]
names(md_cols)[2] <- "test"
nms <- c("file", "id", "factors")
if (!all(nms %in% tolower(names(md_cols))))
stop("Invalid argument 'panel_cols'.\nList elements should be named ",
paste(dQuote(nms), collapse=", "))
input_nms <- sapply(c(panel_cols, md_cols), names)
input_nms
input_nms <- lapply(c(panel_cols, md_cols), names)
input_nms
input_nms <- lapply(list(panel_cols, md_cols), names)
input_nms
input_nms <- sapply(list(panel_cols, md_cols), names)
input_nms
panel_cols
names(panel_cols) <- c("file", "antigen")
input_nms <- sapply(list(panel_cols, md_cols), names)
input_nms
input_nms <- list(panel=names(panel_cols), md=names(md_cols))
nms <- list(panel=c("channel", "antigen"), md=c("file", "id", "factors"))
input_nms <- list(panel=names(panel_cols), md=names(md_cols))
for (i in c("panel", "md"))
if (!all(nms[[i]] %in% input_nms[[i]]))
stop("Invalid argument ", i, "_cols'.\nList elements should be named ",
paste(dQuote(nms[[i]]), collapse=", "))
panel_cols
names(panel_cols)[1] <- "channel"
nms <- list(panel=c("channel", "antigen"), md=c("file", "id", "factors"))
input_nms <- list(panel=names(panel_cols), md=names(md_cols))
for (i in c("panel", "md"))
if (!all(nms[[i]] %in% input_nms[[i]]))
stop("Invalid argument ", i, "_cols'.\nList elements should be named ",
paste(dQuote(nms[[i]]), collapse=", "))
md_cols
names(md_cols)[2] <- "id"
nms <- list(panel=c("channel", "antigen"), md=c("file", "id", "factors"))
input_nms <- list(panel=names(panel_cols), md=names(md_cols))
for (i in c("panel", "md"))
if (!all(nms[[i]] %in% input_nms[[i]]))
stop("Invalid argument ", i, "_cols'.\nList elements should be named ",
paste(dQuote(nms[[i]]), collapse=", "))
setNames(sapply(list(panel_cols, md_cols), names), c("panel", "md"))
?daFrame
library(CATALYST)
?daFrame
library(CATALYST)
?daFrame
(re <- cluster(re, cols_to_use=lineage))
dim(cluster_codes(re))
head(cluster_codes(re))
SOM_codes(re)
re
metadata(re)
keyword(fs, "FILENAME")
PBMC_fs
PBMC_fs[[1]]
description(PBMC_fs[[1]])
for (i in seq_along(PBMC_fs)) {}
for (i in seq_along(PBMC_fs)) {
description(PBMC_fs[[i]])$FILENAME <- md$file_name[i] }
PBMC_fs[[1]]
fs <- PBMC_fs
keyword(fs, "FILENAME")
match(keyword(fs, "FILENAME"), md[[md_cols$file]])
n_events <- fsApply(fs, nrow)[m]
m <- c(6:12, 1:5)
n_events <- fsApply(fs, nrow)[m]
n_events <- fsApply(fs, nrow)[m]
n_events
m <- match(keyword(fs, "FILENAME"), md[[md_cols$file]])
fsApply(fs, nrow)[m]
devtools::use_data(PBMC_fs)
devtools::use_data(PBMC_fs, overwrite=TRUE)
PBMC_fs
PBMC_fs[[1]]
description(PBMC_fs[[1]])
?plotClusterHeatmap
