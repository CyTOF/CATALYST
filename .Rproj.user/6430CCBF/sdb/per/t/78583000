{
    "collab_server" : "",
    "contents" : "# ==============================================================================\n# colors for 20 ConensusClusterPlus metaclusters\n# ------------------------------------------------------------------------------\ncluster_cols <- c(\n    \"#DC050C\", \"#FB8072\", \"#1965B0\", \"#7BAFDE\", \"#882E72\",\n    \"#B17BA6\", \"#FF7F00\", \"#FDB462\", \"#E7298A\", \"#E78AC3\",\n    \"#33A02C\", \"#B2DF8A\", \"#55A1B1\", \"#8DD3C7\", \"#A6761D\",\n    \"#E6AB02\", \"#7570B3\", \"#BEAED4\", \"#666666\", \"#999999\",\n    \"#aa8282\", \"#d4b7b7\", \"#8600bf\", \"#ba5ce3\", \"#808000\",\n    \"#aeae5c\", \"#1e90ff\", \"#00bfff\", \"#56ff0d\", \"#ffff00\")\n\n# ==============================================================================\n# scale expression to values b/w 0 and 1 using \n# low (1%) and high (99%) quantiles as boundaries\n# ------------------------------------------------------------------------------\nscale_exprs <- function(x) {\n    qs <- matrixStats::colQuantiles(x, probs=c(.01, .99))\n    x_scaled <- t((t(x) - qs[, 1]) / (qs[, 2] - qs[, 1]))\n    x_scaled[x_scaled < 0] <- 0\n    x_scaled[x_scaled > 1] <- 1\n    return(x_scaled)\n}\n\n# ------------------------------------------------------------------------------\n# validity check for plotNRS: \n# check that input corresponds to list\n# as returned by ConsensusClusterPlus \n# ------------------------------------------------------------------------------\nis_ConsensusClusterPlus_list <- function(x) {\n    slots <- vapply(x[-1], names, character(5))\n    valid <- apply(slots, 2, all.equal, \n        c(paste0(\"consensus\", c(\"Matrix\", \"Tree\", \"Class\")), \"ml\", \"clrs\"))\n    valid <- sum(valid) == length(x) - 1\n    if (!valid)\n        stop(\"Invalid input: x should be a list \n            as returned by 'ConsensusClusterPlus'.\", call.=FALSE)\n}\n\n# ==============================================================================\n# calculate non-redundancy score (NRS) for ea. sample\n# ------------------------------------------------------------------------------\nnrs <- function(x, n=3) {\n    pc <- prcomp(x, center=TRUE, scale.=FALSE)\n    scores <- rowSums(outer(rep(1, ncol(x)),\n        pc$sdev[seq_len(n)]^2) * abs(pc$rotation[, seq_len(n)]))\n    return(scores)\n}\n\n# ==============================================================================\n# change in area under CDF curve\n# ------------------------------------------------------------------------------\ntriangle <- function(m) {\n    n <- ncol(m)\n    nm <- matrix(0, ncol=n, nrow=n)\n    fm <- m\n    nm[upper.tri(nm)] <- m[upper.tri(m)]\n    fm <- t(nm) + nm\n    diag(fm) <-  diag(m)\n    nm <- fm\n    nm[upper.tri(nm)] <- NA\n    diag(nm) <- NA\n    m[lower.tri(nm)]\n}\n\n# ==============================================================================\n# Z-score normalization to mean=0 and sd=1\n# ------------------------------------------------------------------------------\nZ_norm <- function(x, th) {\n    es_normed <- apply(x, 1, function(x) {\n        sdx <- sd(x, na.rm=TRUE)\n        if (sdx == 0) {\n            x <- (x-mean(x, na.rm=TRUE))\n        } else {\n            x <- (x-mean(x, na.rm=TRUE)) / sdx\n        }\n        x[x > th] <- th\n        x[x < -th] <- -th\n        return(x)\n    })\n    t(es_normed)\n}",
    "created" : 1517592944359.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2482239806",
    "id" : "78583000",
    "lastKnownWriteTime" : 1517298050,
    "last_content_update" : 1517298050,
    "path" : "~/Documents/CATALYST/R/helpers-differential.R",
    "project_path" : "R/helpers-differential.R",
    "properties" : {
        "source_window_id" : ""
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}