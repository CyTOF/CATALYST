{
    "collab_server" : "",
    "contents" : "# ==============================================================================\n# Heatmap of median marker expressions across clusters\n# ------------------------------------------------------------------------------\n#' @rdname plotClusterHeatmap\n#' @title Median marker expressions across clusters\n#' \n#' @description \n#' Plots a heatmap of median lineage marker expressions across clusters, \n#' and median functional marker expressions within each cluster across samples.\n#'\n#' @param x expression matrix.\n#' @param hm2 a character string that specifies the right-hand side heatmap. \n#' Depending on the argument, the output will be as follows:\n#' \\itemize{\n#' \\item \\code{\"abundances\"}: cluster frequencies across samples\n#' \\item \\code{\"type2\"}: median type 2 marker expressions across clusters \n#' (analogous to the left-hand side heatmap)\n#' \\item a character string/vector corresponding to one/multiple marker(s): \n#' median marker expressions across samples and clusters}\n#' @param k specifies the clustering across which \n#' median marker expressions should be computed.\n#' @param m specifies the second layer of clustering to be shown. \n#' @param freq_bars,freq_labs logical. Should marginal histograms\n#' of cluster frequencies be shown and annotated?\n#' @param scaled logical specifying whether scaled values should be plotted\n#' (see below for details).\n#' @param out_path a character string. If specified, \n#' output will be generated in this location. Defaults to NULL.\n#' \n#' @return a \\code{\\link{HeatmapList-class}} object.\n#' \n#' @details Scaled values corresponds to cofactor arcsinh-transformed \n#' expression values scaled between 0 and 1 using 1% and 99% percentiles as \n#' boundaries. Hierarchical clustering is performed on the unscaled data.\n#' \n#' @examples\n#' data(PBMC_fs, PBMC_panel, PBMC_md)\n#' re <- daFrame(PBMC_fs, PBMC_panel, PBMC_md)\n#' \n#' # run clustering\n#' lineage <- c(\"CD3\", \"CD45\", \"CD4\", \"CD20\", \"CD33\", \n#'     \"CD123\", \"CD14\", \"IgM\", \"HLA_DR\", \"CD7\")\n#' re <- cluster(re, cols_to_use=lineage)\n#' \n#' plotClusterHeatmap(re, hm2=\"abundances\")\n#' plotClusterHeatmap(re, hm2=\"type2\", k=12)\n#' plotClusterHeatmap(re, hm2=\"pS6\", k=12, m=8)\n#' \n#' @author\n#' Helena Lucia Crowell \\email{crowellh@student.ethz.ch}\n#' @references \n#' Nowicka M, Krieg C, Weber LM et al. \n#' CyTOF workflow: Differential discovery in \n#' high-throughput high-dimensional cytometry datasets.\n#' \\emph{F1000Research} 2017, 6:748 (doi: 10.12688/f1000research.11622.1)\n#' \n#' @import ComplexHeatmap\n#' @importFrom dplyr funs group_by summarise_all\n#' @importFrom RColorBrewer brewer.pal\n#' @importFrom reshape2 dcast\n#' @importFrom stats dist\n#' @export\n# ==============================================================================\n\nsetMethod(f=\"plotClusterHeatmap\", \n    signature=signature(x=\"daFrame\"), \n    definition=function(x, hm2=NULL, k=20, m=NULL, \n        freq_bars=TRUE, freq_labs=TRUE,\n        scaled=TRUE, out_path=NULL) {\n        \n        check_validity_of_k(x, k)\n        if (!is.null(hm2) && !hm2 %in% c(\"abundances\", \"type2\", colnames(x)))\n            stop(\"Invalid argument for 'hm2'. Should be NULL, \", \n                paste(dQuote(c(\"abundances\", \"type2\")), collapse=\", \"), \n                \" or a character string in \", \n                paste0(\"'colnames(\", deparse(substitute(x)), \")'.\"))\n        \n        k <- as.character(k)\n        if (!is.null(m)) {\n            check_validity_of_k(x, m)\n            m <- as.character(m)\n        }\n        \n        es <- exprs(x)\n        cluster_ids <- factor(cluster_codes(x)[, k][cluster_ids(x)])\n        n_clusters <- nlevels(cluster_ids)\n        \n        # compute medians across clusters\n        med_exprs <- data.frame(es, cluster_id=cluster_ids) %>%\n            group_by(cluster_id) %>% summarize_all(funs(median))\n        \n        # cluster based on markers used for clustering\n        d <- stats::dist(med_exprs[, type1(x)], method=\"euclidean\")\n        row_clustering <- hclust(d, method=\"average\")\n        \n        # row labels and cluster annotations\n        row_anno <- levels(cluster_ids)\n        row_cols <- cluster_cols[seq_len(n_clusters)]\n        names(row_cols) <- row_anno\n        cluster_anno <- Heatmap(row_anno, row_cols, \"cluster_id\",\n            cluster_rows=row_clustering, cluster_columns=FALSE,\n            row_dend_reorder=FALSE, width=unit(.5, \"cm\"))\n        \n        # merging annotation\n        merging_anno <- NULL\n        if (!is.null(m)) {\n            merging_ids <- factor(cluster_codes(x)[, m])[\n                match(seq_len(n_clusters), cluster_codes(x)[, k])]\n            merging_cols <- cluster_cols[seq_len(nlevels(merging_ids))]\n            names(merging_cols) <- levels(merging_ids)\n            merging_anno <- Heatmap(merging_ids, merging_cols, \"merging_id\",\n                cluster_rows=row_clustering, cluster_columns=FALSE,\n                row_dend_reorder=FALSE, width=unit(.5, \"cm\"))\n        }\n        \n        # left-hand side heatmap:\n        # type 1 median marker expressions across clusters\n        hm_cols <- colorRampPalette(rev(brewer.pal(9, \"RdYlBu\")))(100)\n        if (scaled) {\n            es0 <- scale_exprs(es)\n            hm1_exprs <- data.frame(es0, cluster_id=cluster_ids) %>%\n                group_by(cluster_id) %>% summarize_all(funs(median))\n            hm2_exprs <- es0\n        } else {\n            hm1_exprs <- med_exprs\n            hm2_exprs <- es\n        }\n        hm1 <- Heatmap(hm1_exprs[, type1(x)], hm_cols, \n            paste0(\"scaled\\n\"[TRUE], \"expression\"), \n            column_names_gp=gpar(fontsize=8),\n            cluster_rows=row_clustering, cluster_columns=FALSE,\n            heatmap_legend_param=list(color_bar=\"continuous\"))\n        \n        # compute cluster frequencies\n        counts <- as.numeric(table(cluster_ids))\n        freqs <- round(counts/sum(counts)*100, 2)\n        if (freq_bars) {\n            freq_bars <- rowAnnotation(width=unit(2, \"cm\"), \"Frequency [%]\"=\n                    row_anno_barplot(x=freqs, border=FALSE, axis=TRUE,\n                        gp=gpar(fill=\"grey50\", col=\"white\"), bar_with=.75))\n        } else {\n            freq_bars <- NULL\n        }\n        if (freq_labs) {\n            freq_labs <- paste0(row_anno, \" (\", freqs, \"%)\")\n            freq_anno <- rowAnnotation(\n                text=row_anno_text(freq_labs), \n                width=max_text_width(freq_labs))\n        } else {\n            freq_anno <- NULL\n        }\n\n        p <- merging_anno + cluster_anno + hm1 + freq_bars + freq_anno\n        \n        # right-hand side heatmap\n        if (!is.null(hm2)) {\n            if (hm2 == \"abundances\") {\n                # cluster frequencies across samples\n                counts <- as.data.frame.matrix(\n                    table(cluster_ids, sample_ids(x)))\n                n_events <- colSums(counts)\n                freqs <- t(t(counts) / n_events)\n                p <- p + Heatmap(freqs, \n                    rev(brewer.pal(11, \"PuOr\")[2:10]), \"frequency\",\n                    show_row_names=FALSE, column_names_gp=gpar(fontsize=8), \n                    cluster_rows=row_clustering, cluster_columns=FALSE,\n                    heatmap_legend_param=list(color_bar=\"continuous\"))\n            } else if (hm2 == \"type2\") {\n                # type 2 median expressions across clusters\n                p <- p + Heatmap(hm1_exprs[, type2(x)], hm_cols, \"\", \n                    cluster_rows=row_clustering, cluster_columns=FALSE,\n                    column_names_gp=gpar(fontsize=8), \n                    show_heatmap_legend=FALSE)\n            } else {\n                # median marker expressions across samples & clusters\n                df <- data.frame(hm2_exprs,\n                    sample_id=sample_ids(x), cluster_id=cluster_ids) %>%\n                    group_by(sample_id, cluster_id) %>% \n                    summarise_all(funs(median))\n                for (i in hm2) {\n                    mat <- dcast(df[, c(\"sample_id\", \"cluster_id\", i)], \n                        cluster_id~sample_id, value.var=i)[, -1]\n                    p <- p + Heatmap(mat, hm_cols, show_heatmap_legend=FALSE,\n                        column_title=i, column_names_gp=gpar(fontsize=8), \n                        cluster_rows=row_clustering, cluster_columns=FALSE)\n                }\n            }\n        }\n        \n        if (!is.null(out_path)) {\n            out_nm <- file.path(out_path, \"clustering_heatmap.pdf\")\n            pdf(out_nm, width=36, height=6); draw(p); dev.off()\n        } else {\n            draw(p)\n        }\n    }\n)\n",
    "created" : 1517592734473.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1335191030",
    "id" : "D3DCC2E4",
    "lastKnownWriteTime" : 1517648837,
    "last_content_update" : 1517648837,
    "path" : "~/Documents/CATALYST/R/plotClusterHeatmap.R",
    "project_path" : "R/plotClusterHeatmap.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}