{
    "collab_server" : "",
    "contents" : "# ==============================================================================\n# Debarcoding frame class\n# ------------------------------------------------------------------------------\n#' @rdname dbFrame-class\n#' @name dbFrame-class\n#' \n#' @title Debarcoding frame class\n#' @description \n#' This class represents the data returned by and used throughout debarcoding.\n#' \n#' @details \n#' Objects of class \\code{dbFrame} hold all data required for debarcoding:\n#' \\enumerate{\n#' \\item as the initial step of single-cell deconcolution, \n#' \\code{\\link{assignPrelim}} will return a \\code{dbFrame} containing the\n#' input measurement data, barcoding scheme, and preliminary event assignments.\n#' \\item assignments will be made final by \\code{\\link{applyCutoffs}}.\n#' Optionally, population-specific separation cutoffs may be estimated \n#' by running \\code{\\link{estCutoffs}} prior to this.\n#' \\item \\code{\\link{plotYields}}, \\code{\\link{plotEvents}} and \n#' \\code{\\link{plotMahal}} aim to guide selection of devoncolution parameters \n#' and to give a sense of the resulting barcode assignment quality.\n#' }\n#' \\code{show(dbFrame)} will display \\itemize{\n#' \\item the dimensionality of the measurement data and number of barcodes\n#' \\item current assignments in order of decreasing population size\n#' \\item current separation cutoffs\n#' \\item the average and per-population yield \n#'       that will be achieven upon debarcoding}\n#' \n#' @slot exprs  \n#' a matrix containing raw intensities of the input flowFrame.\n#' @slot bc_key \n#' binary barcoding scheme with numeric masses as column names \n#' and samples names as row names OR a numeric vector of barcode masses.\n#' @slot bc_ids\n#' vector of barcode IDs. If a barcoding scheme is supplied, \n#' the respective binary code's row name, else, the mass of the respective \n#' barcode channel.\n#' @slot deltas \n#' numeric vector of separations between positive and negative \n#' barcode populations computed from normalized barcode intensities.\n#' @slot normed_bcs \n#' matrix containing normalized barcode intensities.\n#' @slot mhl_dists\n#' mahalanobis distances.\n#' @slot sep_cutoffs\n#' numeric vector of distance separation cutoffs between positive and negative \n#' barcode populations above which events will be unassigned.\n#' @slot mhl_cutoff\n#' non-negative and non-zero numeric value specifying the Mahalanobis distance \n#' below which events will be unassigned.\n#' @slot counts\n#' matrix of dimension (# barcodes)x(101) where each row contains the number \n#' of events within a barcode for which positive and negative populations \n#' are separated by a distance between in [0,0.01), ..., [0.99,1], respectively.\n#' @slot yields\n#' a matrix of dimension (# barcodes)x(101) where each row contains the \n#' percentage of events within a barcode that will be obtained after applying\n#' a separation cutoff of 0, 0.01, ..., 1, respectively.\n#'\n#' @author Helena Lucia Crowell \\email{crowellh@student.ethz.ch}\n#' @importFrom methods new\n#' @export\n# ------------------------------------------------------------------------------\n# class definition\ndbFrame <- setClass(Class=\"dbFrame\", package=\"CATALYST\", slots=c(\n    exprs=\"matrix\",\n    bc_key=\"data.frame\",\n    bc_ids=\"vector\",\n    deltas=\"numeric\",\n    normed_bcs =\"matrix\",\n    mhl_dists = \"numeric\",\n    sep_cutoffs=\"numeric\",\n    mhl_cutoff=\"numeric\",\n    counts=\"matrix\",\n    yields=\"matrix\"))\n\n# ------------------------------------------------------------------------------\n# validity\n# ------------------------------------------------------------------------------\nsetValidity(Class=\"dbFrame\", \n    method=function(object){\n        n <- nrow(exprs(object))\n        ms <- gsub(\"[[:alpha:][:punct:]]\", \"\", colnames(exprs(object)))\n        # check that all barcode masses occur in the measurement data\n        if (!all(colnames(bc_key(object)) %in% ms))\n            return(message(\"Invalid 'bc_key': Column names must be numeric\",\n                \"\\nand coherent with masses eobjecttracted from 'exprs'.\"))\n        # check that 'normed_bcs' is of dimension\n        # number events x number barcode channels\n        if (!all.equal(dim(normed_bcs(object)), c(n, ncol(bc_key(object)))))\n            return(message(\"'normed_bcs' should be of dimension\",\n                \"nrow('exprs') x ncol('bc_key').\"))\n        # check that 'bc_ids', 'deltas' and 'mhl_dists' \n        # are of length number of events\n        if (!all(c(length(bc_ids(object)), length(deltas(object))) == n))\n            return(message(\"'bc_ids' and 'deltas' should have\\n\",\n                \"as many entries as numbers of rows in 'exprs'.\"))\n        if (!length(mhl_dists(object)) %in% c(0, n))\n            return(message(\"'mhl_dists' should have\\n\",\n                \"as many entries as numbers of rows in 'exprs'.\"))\n        # check that all 'bc_ids\" are 0 = \"unassigned\"\n        # or occur as row names in the 'bc_key'\n        if ((valid <- sum(bc_ids(object) %in% \n                c(0, rownames(bc_key(object))))) != n)\n            return(message(n-valid, \"/\", n, \" 'bc_ids' are invalid.\\n\",\n                \"'bc_ids' should be either 0 = \\\"unassigned\\\"\\n\",\n                \"or occur as rownames in the 'bc_key'.\"))\n        return(TRUE)\n    })\n\n# ==============================================================================\n# Differential analysis frame class\n# ------------------------------------------------------------------------------\n#' @rdname daFrame-class\n#' @name daFrame-class\n#' \n#' @title Differential analysis frame class\n#' @description \n#' Represents the data returned by and used throughout differential analysis.\n#' \n#' @slot assays \n#' list of length one containing the arcsinh-transformed expressions.\n#' @slot rowData \n#' the metadata information for each event, and its cluster ID\n#' as inferred by the initial \\code{\\link{FlowSOM}} clustering.\n#' @slot colData \n#' a data.frame with the following columns:\\itemize{\n#' \\item \\code{channel} original column name in the input \\code{flowSet}\n#' \\item \\code{type1}, \\code{type2} logical vectors indicating, \n#' for each antigen, whether it was used for clustering}\n#' @slot metadata \n#' a named list containing:\\itemize{\n#' \\item \\code{design}: the original metadata-table\n#' \\item \\code{panel}: the original panel-table\n#' \\item \\code{n_events}: the number of events measured per sample\n#' \\item \\code{SOM_codes}: a k x p matrix of SOM codes, \n#' where k = no. of clusters, and p = no. of measurement parameters\n#' \\item \\code{cluster_codes}: cluster codes for the initial \n#' \\code{\\link{FlowSOM}} clustering, the \\code{\\link{ConsensusClusterPlus}} \n#' metaclustering, and manual mergings done with \\code{\\link{mergeClusters}}}\n#'\n#' @author Helena Lucia Crowell \\email{crowellh@student.ethz.ch}\n#' @import ConsensusClusterPlus Rtsne SummarizedExperiment\n#' @importFrom flowCore colnames exprs fsApply parameters pData\n#' @importFrom FlowSOM BuildSOM ReadInput\n#' @importFrom methods new\n#' @importFrom S4Vectors DataFrame SimpleList\n#' @export\n# ------------------------------------------------------------------------------\n# class definition\nsetClass(\n    Class=\"daFrame\", \n    contains=\"SummarizedExperiment\")\n\n# ------------------------------------------------------------------------------\n# constructor\n# ------------------------------------------------------------------------------\n#' @rdname daFrame-class\n#' \n#' @param fs a \\code{\\link{flowSet}} holding all samples.\n#' @param panel a 2 column data.frame that contains for each marker of interest \n#' i) its column name in the FCS file, and ii) the targeted protein marker.}\n#' @param md a data.frame with columns describing the experiment.\n#' An exemplary metadata table could look as follows:\\itemize{\n#' \\item \\code{file_name}: the FCS file name\n#' \\item \\code{sample_id}: a unique sample identifier\n#' \\item \\code{condition}: brief sample description (e.g. REF)\n#' \\item \\code{patient_id}: the patient ID}\n#' @param panel_cols a named list specifying column names in the input panel \n#' that contain i) the channel names of the input \\code{flowSet}, and ii) \n#' the corresponding targeted protein marker. List elements should be named \n#' \\code{\"channel\"} and \\code{\"antigen\"}, respectively.\n#' @param md_cols a named list specifying column names in the input metadata\n#' that contain i) the FCS file names, ii) unique sample identifiers, \n#' iii) a character vector of factors descriptive of the samples\n#' (e.g. condition, treatment, batch, ect.). List elements should be named \n#' \\code{\"file\"}, \\code{\"id\"}, and \\code{\"factors\"}, respectively.\n#' @param cols_to_use a logical vector OR numeric vector of indices \n#' OR character vector of column names. Specifies the columns to keep \n#' from the input \\code{flowSet}.\n#' @param cofactor cofactor to use for arcsinh-transformation.\n#' \n#' @export\n#' @import SummarizedExperiment\n# ------------------------------------------------------------------------------\ndaFrame <- function(fs, panel, md, cols_to_use=NULL, cofactor=5,\n    panel_cols=list(channel=\"fcs_colname\", antigen=\"antigen\"),\n    md_cols=list(file=\"file_name\", id=\"sample_id\", \n        factors=c(\"condition\", \"patient_id\"))) {\n    \n    # set/check colnames of panel \n    chs <- flowCore::colnames(fs)\n    if (is.null(cols_to_use))\n        cols_to_use <- chs\n    check_validity_cols(cols_to_use, chs)\n    \n    # check panel_cols & md_cols \n    nms <- list(panel=c(\"channel\", \"antigen\"), md=c(\"file\", \"id\", \"factors\"))\n    input_nms <- list(panel=names(panel_cols), md=names(md_cols))\n    for (i in c(\"panel\", \"md\"))\n        if (!all(nms[[i]] %in% input_nms[[i]]))\n            stop(\"Invalid argument \", i, \"_cols'.\\n\",\n                \"List elements should be named \",\n                paste(dQuote(nms[[i]]), collapse=\", \"))\n    check_validity_cols(unlist(panel_cols), colnames(panel))\n    check_validity_cols(unlist(md_cols), colnames(md))\n    \n    # replace problematic characters\n    antigens <- gsub(\"-\", \"_\", panel[[panel_cols$antigen]])\n    \n    # arcsinh-transformation & column subsetting\n    fs <- fs[, cols_to_use]\n    fs <- fsApply(fs, function(ff) {\n        flowCore::exprs(ff) <- asinh(exprs(ff)/cofactor)\n        return(ff)\n    })\n    # reorder flowSet according to metadata table\n    m <- match(keyword(fs, \"FILENAME\"), md[[md_cols$file]])\n    fs <- fs[m]\n    \n    md <- data.frame(md)\n    chs <- flowCore::colnames(fs)\n    m1 <- match(panel[[panel_cols$channel]], chs, nomatch=0)\n    m2 <- match(chs, panel[[panel_cols$channel]])\n    flowCore::colnames(fs)[m1] <- antigens[m2]\n    es <- matrix(fsApply(fs, exprs), \n        ncol=length(chs),\n        dimnames=list(NULL, flowCore::colnames(fs)))\n    n_events <- fsApply(fs, nrow)\n    n_events <- setNames(as.numeric(n_events), md[[md_cols$id]])\n    \n    # construct SummarizedExperiment\n    row_data <- S4Vectors::DataFrame(\n        sample_id=rep(md[[md_cols$id]], n_events), \n        sapply(md_cols$factors, function(i) rep(md[[i]], n_events)))\n    col_data <- S4Vectors::DataFrame(channel=chs, row.names=colnames(es))\n    \n    new(\"daFrame\", \n        SummarizedExperiment(\n            assays=SimpleList(es=es),\n            rowData=row_data, colData=col_data,\n            metadata=list(design=md, n_events=n_events)))\n}\n\n# ------------------------------------------------------------------------------\n# validity\n# ------------------------------------------------------------------------------\n# setValidity(Class=\"daFrame\", method=function(object) {\n#     #############\n#     ### TO DO ###\n#     #############\n#     })\n",
    "created" : 1517593094428.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2262023521",
    "id" : "1F406154",
    "lastKnownWriteTime" : 1517655313,
    "last_content_update" : 1517655313015,
    "path" : "~/Documents/CATALYST/R/AllClasses.R",
    "project_path" : "R/AllClasses.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}