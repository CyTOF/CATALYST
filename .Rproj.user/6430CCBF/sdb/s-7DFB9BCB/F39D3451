{
    "collab_server" : "",
    "contents" : "# Analyzing Trapnell et al. 2014 Nature biotechnology with Waterfall and Monocle #\n\n# Read TPM and annotation table\nsetwd(\"/Users/rookysh/Desktop/reviewer_codes/M2. Trapnell et al.\") #locate the folder with the TPM and annotation files.\na <-read.table(file=\"mono_TPM.txt\",header=T)\nanno <-read.table(file=\"monocle_anno.csv\",sep=\",\")\n\nall <-a\n\n# remove samples with low number of reads\nanno <-anno[-match(c(\"SRR1032987\",\"SRR1033011\",\"SRR1033086\",\"SRR1033027\",\"SRR1033035\",\"SRR1033167\",\"SRR1033016\",\"SRR1033033\",\"SRR1033059\",\"SRR1033071\",\"SRR1033053\",\"SRR1033063\",\"SRR1033099\",\"SRR1033093\",\"SRR1033100\",\"SRR1033247\",\"SRR1033250\",\"SRR1033265\",\"SRR1032937\",\"SRR1032925\",\"SRR1033276\",\"SRR1033220\",\"SRR1033221\",\"SRR1032949\",\"SRR1032979\",\"SRR1032943\",\"SRR1033003\",\"SRR1032991\",\"SRR1032931\",\"SRR1033244\",\"SRR1033199\",\"SRR1032955\",\"SRR1033243\"),anno[,1]),]\n\nall <-all[,match(anno$V1,colnames(all))]\ncolnames(all) <-anno$V3\nall(colnames(all)==anno$V3)\n\n# color assigning\nall.col <-rep(\"#BFBFBF30\",nrow(anno))\nall.col[grep(\"T0_\",anno$V3)] <-\"#4882C3\" #1 blue\nall.col[grep(\"T24_\",anno$V3)] <-\"#F26A6A\" #2 salmon\nall.col[grep(\"T48_\",anno$V3)] <-\"#13751B\" #3 darkgreen\nall.col[grep(\"T72_\",anno$V3)] <-\"#FF6A00\" #4 orange\nall.col[grep(\"RNA_\",anno$V3)] <-\"#000000\" #RNA black\n\n# Quality check for potential batch effect or outliers #\nc <- cor(all, method=\"pearson\"); d <- dist(c); hr <- hclust(d, method = \"ward\", members=NULL); plot(hr,labels=anno$V3)\n\n# Remove outlier group #\nplot(hr,labels=cutree(hr,k=2))\nall <-all[,which(cutree(hr,k=2)==1)]\nall.col <-all.col[which(cutree(hr,k=2)==1)]\nanno <-anno[which(cutree(hr,k=2)==1),]\nc <- cor(all, method=\"pearson\"); d <- dist(c); hr <- hclust(d, method = \"ward\", members=NULL); plot(hr, hang = 0.1); plot(hr,labels=anno$V3)\n\n# Eliminate outlier from clustering one by one until seeing the clear trajectory\npca <- prcomp(as.data.frame(t(all)), cor=T)\nplot(pca$x[,1:2],col=all.col,pch=19)\ntext(pca$x[,1:2],labels=rownames(pca$x))\n\nanno <-anno[-grep(\"T48_CT_G05\",anno$V3),] # remove additional outlier\nall <-all[,match(anno$V3,colnames(all))]\nall.col <-all.col[match(anno$V3,colnames(all))]\n\npca <- prcomp(as.data.frame(t(all)), cor=T)\nplot(pca$x[,1:2],col=all.col,pch=19)\ntext(pca$x[,1:2],labels=rownames(pca$x))\n\n# Select for a route of interest to reconstruct\nc <- cor(all, method=\"pearson\"); d <- dist(c); hr <- hclust(d, method = \"ward\", members=NULL); plot(hr, hang = 0.1); plot(hr,labels=anno$V3)\n\nall.col[which(cutree(hr,h=22)==1)] <-\"#7fc97f\" # light green\nall.col[which(cutree(hr,h=22)==2)] <-\"#beaed4\" # light purple\nall.col[which(cutree(hr,h=22)==3)] <-\"#fdc086\" # light peach\nall.col[which(cutree(hr,h=22)==4)] <-\"#ffff99\" # light yellow\nall.col[which(cutree(hr,h=22)==5)[(which(cutree(hr,h=22)==5) %notin% which(cutree(hr,h=12.5)==5))]] <-\"#386cb0\" # blue; We subdivided this group due to the greater size of it. Grouping in Waterfall is to help dissecting the branches more easily, not to make any conclusion (eg. differential gene expression analyses between cell types).\nall.col[which(cutree(hr,h=22)==6)] <-\"#f0027f\" # hot pink\nall.col[which(cutree(hr,h=22)==7)] <-\"#bf5b17\" # dark orange\nall.col[which(cutree(hr,h=12.5)==5)] <-\"#e41a1c\" # red\nnames(all.col) <-colnames(all)\n\nc <- cor(all, method=\"pearson\"); d <- dist(c); hr <- hclust(d, method = \"ward\", members=NULL); plot(hr, hang = 0.1); plot(hr,labels=all.col)\npca <- prcomp(as.data.frame(t(all[,match(anno$V3,colnames(all))])), cor=T)\nplot(pca$x[,1:2],col=all.col,pch=19)\ntext(pca$x[,1:2],labels=rownames(pca$x))\n\nanno_0h <-anno[match(rownames(pca$x)[which(all.col %in% c(\"#7fc97f\",\"#beaed4\"))],anno$V3),] # 0h cluster\nanno_unk <-anno[match(rownames(pca$x)[which(all.col %in% c(\"#386cb0\",\"#f0027f\"))],anno$V3),] # unknown branch\nanno_early <-anno[match(rownames(pca$x)[which(all.col %in% c(\"#e41a1c\"))],anno$V3),] # Early stage in DM\nanno_late <-anno[match(rownames(pca$x)[which(all.col %in% c(\"#bf5b17\",\"#fdc086\"))],anno$V3),] # Late stage in DM\n\n# Test for the Proportion of different time points in developmental groups determined by Waterfall without population information\n# This determines whether branch determination was precise enough to distinguish time stamps (eg. 0h)\nbarplot(100*c(length(grep(\"T0\",anno_0h$V3))/length(which(anno$V4==\"0h\")),length(grep(\"T24\",anno_0h$V3))/length(which(anno$V4==\"24h\")),length(grep(\"T48\",anno_0h$V3))/length(which(anno$V4==\"48h\")),length(grep(\"T72\",anno_0h$V3))/length(which(anno$V4==\"72h\"))),main=\"Proliferating myoblasts\",names.arg=c(\"0h\",\"24h\",\"48h\",\"72h\"),col=c(\"#4882C3\",\"#F26A6A\",\"#13751B\",\"#FF6A00\"),ylab=\"% of cells from each time point\")\nbarplot(100*c(length(grep(\"T0\",anno_unk$V3))/length(which(anno$V4==\"0h\")),length(grep(\"T24\",anno_unk$V3))/length(which(anno$V4==\"24h\")),length(grep(\"T48\",anno_unk$V3))/length(which(anno$V4==\"48h\")),length(grep(\"T72\",anno_unk$V3))/length(which(anno$V4==\"72h\"))),main=\"upward branch\",names.arg=c(\"0h\",\"24h\",\"48h\",\"72h\"),col=c(\"#4882C3\",\"#F26A6A\",\"#13751B\",\"#FF6A00\"),ylab=\"% of cells from each time point\")\nbarplot(100*c(length(grep(\"T0\",anno_early$V3))/length(which(anno$V4==\"0h\")),length(grep(\"T24\",anno_early$V3))/length(which(anno$V4==\"24h\")),length(grep(\"T48\",anno_early$V3))/length(which(anno$V4==\"48h\")),length(grep(\"T72\",anno_early$V3))/length(which(anno$V4==\"72h\"))),main=\"Differentiating myoblasts\",names.arg=c(\"0h\",\"24h\",\"48h\",\"72h\"),col=c(\"#4882C3\",\"#F26A6A\",\"#13751B\",\"#FF6A00\"),ylab=\"% of cells from each time point\")\nbarplot(100*c(length(grep(\"T0\",anno_late$V3))/length(which(anno$V4==\"0h\")),length(grep(\"T24\",anno_late$V3))/length(which(anno$V4==\"24h\")),length(grep(\"T48\",anno_late$V3))/length(which(anno$V4==\"48h\")),length(grep(\"T72\",anno_late$V3))/length(which(anno$V4==\"72h\"))),main=\"Skeletal myotubes\",names.arg=c(\"0h\",\"24h\",\"48h\",\"72h\"),col=c(\"#4882C3\",\"#F26A6A\",\"#13751B\",\"#FF6A00\"),ylab=\"% of cells from each time point\")\n\n####### To compare with Monocle #######\n# Monocle1. predetermined trajectory by the original paper\nlibrary(monocle)\ndata(HSMM)\n\nHSMM <- detectGenes(HSMM, min_expr = 0.1)\nexpressed_genes <-row.names(subset(fData(HSMM), num_cells_expressed >= 50))\nordering_genes <-rownames(fData(HSMM))[which(fData(HSMM)$use_for_ordering)] # Use the genes from pre-saved differential expression between GM and DM\nordering_genes <-intersect(ordering_genes, expressed_genes)\n\nHSMM <- setOrderingFilter(HSMM, ordering_genes)\nHSMM <- reduceDimension(HSMM, use_irlba=FALSE)\nHSMM <- orderCells(HSMM, num_paths=2, reverse=TRUE)\nplot_spanning_tree(HSMM)\nplot_spanning_tree(HSMM,color_by=\"Hours\")\n\nfibroblast <-rownames(pData(HSMM))[which(pData(HSMM)$State==3)] # Presumable fibroblast population\ncluster0h <-rownames(pData(HSMM))[which(pData(HSMM)$State==1)] # Presumable undiff population\ndiffcluster <-rownames(pData(HSMM))[which(pData(HSMM)$State==2)] # Presumable diff population\n\n# Test for the Proportion of different time points in developmental groups determined by Waterfall without population information\n# This determines whether branch determination was precise enough to distinguish time stamps (eg. 0h)\nbarplot(100*c(length(grep(\"T0\",fibroblast))/length(which(pData(HSMM)$Hours==0)),length(grep(\"T24\",fibroblast))/length(which(pData(HSMM)$Hours==24)), length(grep(\"T48\",fibroblast))/length(which(pData(HSMM)$Hours==48)), length(grep(\"T72\",fibroblast))/length(which(pData(HSMM)$Hours==72))),main=\"group3\")\nbarplot(100*c(length(grep(\"T0\",cluster0h))/length(which(pData(HSMM)$Hours==0)),length(grep(\"T24\",cluster0h))/length(which(pData(HSMM)$Hours==24)), length(grep(\"T48\",cluster0h))/length(which(pData(HSMM)$Hours==48)), length(grep(\"T72\",cluster0h))/length(which(pData(HSMM)$Hours==72))),main=\"group1\")\nbarplot(100*c(length(grep(\"T0\",diffcluster))/length(which(pData(HSMM)$Hours==0)),length(grep(\"T24\",diffcluster))/length(which(pData(HSMM)$Hours==24)), length(grep(\"T48\",diffcluster))/length(which(pData(HSMM)$Hours==48)), length(grep(\"T72\",diffcluster))/length(which(pData(HSMM)$Hours==72))),main=\"group2\")\n\nmy_genes <- c(\"CCNA2\", \"CCNB2\", \"MCM4\", \"CKM\", \"ENO3\")\nmy_genes <-rownames(fData(HSMM))[fData(HSMM)$gene_short_name %in% my_genes]\ncds_subset <- HSMM[my_genes,]\nplot_genes_in_pseudotime(cds_subset, color_by=\"State\",cell_size=1.5)\n\npseudotime_monocle.df <-data.frame(cell_id=rownames(pData(HSMM)),pseudotime=pData(HSMM)$Pseudotime)\nrownames(pseudotime_monocle.df) <-pseudotime_monocle.df$cell_id\ncor_pseudotime_monocle <-apply(all,1,function(X){cor(X[match(rownames(pseudotime_monocle.df),colnames(all))],pseudotime_monocle.df$pseudotime)})\ncor_pseudotime_monocle.up <-cor_pseudotime_monocle[order(cor_pseudotime_monocle,decreasing=T)]\ncor_pseudotime_monocle.dn <-cor_pseudotime_monocle[order(cor_pseudotime_monocle,decreasing=F)]\n\n# Monocle without fibroblast (State3); monocle paper excluded State3 because the authors believed they were fibroblast contamination\nrm(HSMM)\ndata(HSMM)\nHSMM <- detectGenes(HSMM, min_expr = 0.1)\nordering_genes <-rownames(fData(HSMM))[which(fData(HSMM)$use_for_ordering)] # Use the genes from pre-saved differential expression between GM and DM\nordering_genes <-intersect(ordering_genes, expressed_genes)\n\nvalid_cells <-rownames(pData(HSMM))[pData(HSMM)$State!=3] # Remove fibroblasts\nHSMM <- HSMM[,valid_cells]\n\nHSMM <- setOrderingFilter(HSMM, ordering_genes)\nHSMM <- reduceDimension(HSMM, use_irlba=FALSE)\nHSMM <- orderCells(HSMM, num_paths=1, reverse=TRUE)\n\nHSMM_monocle_without_fib <-HSMM\n\npseudotime_monocle_rmfib.df <-data.frame(cell_id=rownames(pData(HSMM)),pseudotime=pData(HSMM)$Pseudotime)\nrownames(pseudotime_monocle_rmfib.df) <-pseudotime_monocle_rmfib.df$cell_id\ncor_pseudotime_monocle_rmfib <-apply(all,1,function(X){cor(X[match(rownames(pseudotime_monocle_rmfib.df),colnames(all))],pseudotime_monocle_rmfib.df$pseudotime)})\ncor_pseudotime_monocle_rmfib.up <-cor_pseudotime_monocle_rmfib[order(cor_pseudotime_monocle_rmfib,decreasing=T)]\ncor_pseudotime_monocle_rmfib.dn <-cor_pseudotime_monocle_rmfib[order(cor_pseudotime_monocle_rmfib,decreasing=F)]\n\n\n# Monocle2. assuming there is no prior information of time stamps or media (eg. GM or DM)\n# Monocle without gene list (using top 1000 genes)\nrm(HSMM)\ndata(HSMM)\nHSMM <- detectGenes(HSMM, min_expr = 0.1)\nexpressed_genes <-row.names(subset(fData(HSMM), num_cells_expressed >= 50))\ntop1000_genes <-toupper(rownames(all)[head(order(rowMeans(all),decreasing=T),1000)])\nordering_genes <-top1000_genes[top1000_genes %in% subset(fData(HSMM), num_cells_expressed >= 50)$gene_short_name]\nordering_genes <-rownames(fData(HSMM))[match(ordering_genes,fData(HSMM)$gene_short_name)]\nHSMM <- setOrderingFilter(HSMM, ordering_genes)\nHSMM <- reduceDimension(HSMM, use_irlba=FALSE)\nHSMM <- orderCells(HSMM, num_paths=2, reverse=FALSE)\n\nHSMM_without_gene_list <-HSMM\n\npseudotime_monocle_top1000.df <-data.frame(cell_id=rownames(pData(HSMM)),pseudotime=pData(HSMM)$Pseudotime)\nrownames(pseudotime_monocle_top1000.df) <-pseudotime_monocle_top1000.df$cell_id\ncor_pseudotime_monocle_top1000 <-apply(all,1,function(X){cor(X[match(rownames(pseudotime_monocle_top1000.df),colnames(all))],pseudotime_monocle_top1000.df$pseudotime)})\ncor_pseudotime_monocle_top1000.up <-cor_pseudotime_monocle_top1000[order(cor_pseudotime_monocle_top1000,decreasing=T)]\ncor_pseudotime_monocle_top1000.dn <-cor_pseudotime_monocle_top1000[order(cor_pseudotime_monocle_top1000,decreasing=F)]\n\n\n######## NOW BACK TO THE WATERFALL #########\n# Preprocessing step, continued\n# removing repeat low expressed genes potentially noise #\nall_bg <-all[which(apply(all,1,function(X){if(sort(X,decreasing=T)[round(ncol(all)/20)]>25){TRUE}else{FALSE}})),]\nall_bg_sdv.str <-apply(all_bg,1,sd)\nall_bg_CV.str <-all_bg_sdv.str/rowMeans(all_bg)\nall_bg <-all_bg[which(rowMeans(all_bg)>50| all_bg_CV.str>1.95),]\nall_bg <-all_bg[which(1:nrow(all_bg) %notin% grep(\"Gm\",rownames(all_bg))),]\nall_bg <-all_bg[order(rowMeans(all_bg),decreasing=T),]\nall_bg <-all_bg[,grep(\"R\",colnames(all_bg),invert=T)]\npca <- prcomp(as.data.frame(t(all_bg[,colnames(all_bg) %in% anno$V3])), cor=T)\n\n# Now, check the expression levels of key genes to locate the potential cell types.\ngene_name=\"^CDK1$\"; plot(pca$x[,1:2],col=paste0(all.col,99),cex=scale_row.foo(as.numeric(all[grep(gene_name,rownames(all)),match(rownames(pca$x),colnames(all))]))*8+.3,pch=19,main=gene_name)\ngene_name=\"ENO3\"; plot(pca$x[,1:2],col=paste0(all.col,99),cex=scale_row.foo(as.numeric(all[grep(gene_name,rownames(all)),match(rownames(pca$x),colnames(all))]))*8+.3,pch=19,main=gene_name)\ngene_name=\"^ID1$\"; plot(pca$x[,1:2],col=paste0(all.col,99),cex=scale_row.foo(as.numeric(all[grep(gene_name,rownames(all)),match(rownames(pca$x),colnames(all))]))*8+.3,pch=19,main=gene_name)\ngene_name=\"MYOG\"; plot(pca$x[,1:2],col=paste0(all.col,99),cex=scale_row.foo(as.numeric(all[grep(gene_name,rownames(all)),match(rownames(pca$x),colnames(all))]))*8+.3,pch=19,main=gene_name)\ngene_name=\"^PCNA$\"; plot(pca$x[,1:2],col=paste0(all.col,99),cex=scale_row.foo(as.numeric(all[grep(gene_name,rownames(all)),match(rownames(pca$x),colnames(all))]))*8+.3,pch=19,main=gene_name)\ngene_name=\"SPHK1\"; plot(pca$x[,1:2],col=paste0(all.col,99),cex=scale_row.foo(as.numeric(all[grep(gene_name,rownames(all)),match(rownames(pca$x),colnames(all))]))*8+.3,pch=19,main=gene_name)\ngene_name=\"PDGFRA\"; plot(pca$x[,1:2],col=paste0(all.col,99),cex=scale_row.foo(as.numeric(all[grep(gene_name,rownames(all)),match(rownames(pca$x),colnames(all))]))*8+.3,pch=19,main=gene_name)\ngene_name=\"^VIM$\"; plot(pca$x[,1:2],col=paste0(all.col,99),cex=scale_row.foo(as.numeric(all[grep(gene_name,rownames(all)),match(rownames(pca$x),colnames(all))]))*8+.3,pch=19,main=gene_name)\ngene_name=\"^P4HB$\"; plot(pca$x[,1:2],col=paste0(all.col,99),cex=scale_row.foo(as.numeric(all[grep(gene_name,rownames(all)),match(rownames(pca$x),colnames(all))]))*8+.3,pch=19,main=gene_name)\n\ngene_of_interest.up <-c(\"CKM\",\"ENO3\",\"MYH3\",\"MYOG\",\"HES6\",\"DES\",\"TNNT3\",\"TPM1\",\"MEF2C\",\"CAST\",\"MCAM\",\"EIF5A\",\"ENO2\",\"NCAM1\",\"FABP3\",\"MSTN\",\"GDF11\",\"TNNT1\",\"TNNI2\")\nfor (gene_name in gene_of_interest.up){\n    plot(pca$x[,1:2],col=paste0(all.col,99),cex=scale_row.foo(as.numeric(all[grep(paste0(\"^\",gene_name,\"$\"),rownames(all)),match(rownames(pca$x),colnames(all))]))*8+.3,pch=19,main=gene_name)\n}\n\n\n# Now determine the route of interest: myogenic process\nanno <-anno[grep(\"R\",anno$V2,invert=T),]\nall.col <-all.col[grep(\"R\",anno$V2,invert=T)]\nanno_ex5 <-anno[match(rownames(pca$x)[which(all.col %notin% c(\"#386cb0\",\"#f0027f\"))],anno$V3),]\nall_ex5 <-all_bg[,match(anno_ex5$V3,colnames(all_bg))]\nall_ex5.col <-all.col[match(anno_ex5$V3,colnames(all))]\npca_ex5 <- prcomp(as.data.frame(t(all_ex5)), cor=T)\nplot(pca_ex5$x[,1:2],col=all_ex5.col,pch=19)\ntext(pca_ex5$x[,1:2],labels=rownames(pca_ex5$x))\n\nanno_ex5 <-anno_ex5[anno_ex5$V3 %notin% c(\"T24_CT_H06\",\"T72_CT_G12\",\"T24_CT_D01\",\"T48_CT_G06\",\"T24_CT_F01\",\"T24_CT_G05\",\"T48_CT_E05\",\"T24_CT_C02\",\"T0_CT_H06\",\"T72_CT_D02\"),] #remove outliers\nall_ex5 <-all_bg[,match(anno_ex5$V3,colnames(all_bg))]\nall_ex5.col <-all.col[match(anno_ex5$V3,colnames(all_bg))]\nnames(all_ex5.col) <-anno_ex5$V3\n\npca_ex5 <- prcomp(as.data.frame(t(all_ex5)), cor=T)\nplot(pca_ex5$x[,1:2],col=all_ex5.col,pch=19)\ntext(pca_ex5$x[,1:2],labels=rownames(pca_ex5$x))\n\n# Trajectory reconstruction and pseudotime determination\nmst.of.classification(all_ex5,k=5,color=all_ex5.col)\npseudotime.df <-pseudotimeprog.foo(all_ex5,k=5,color=all_ex5.col, x.reverse=F)\n\n# Gene expression analyses\ncor_pseudotime <-apply(all,1,function(X){cor(X[match(rownames(pseudotime.df),colnames(all))],pseudotime.df$pseudotime)})\ncor_pseudotime.up <-cor_pseudotime[order(cor_pseudotime,decreasing=T)]\ncor_pseudotime.dn <-cor_pseudotime[order(cor_pseudotime,decreasing=F)]\n\n#select gene_of_interest from the Monocle paper supplementary figure 5 + myogenesis markers from R&D systems (\"http://www.rndsystems.com/molecule_group.aspx?g=821\") except smooth muscle markers\ngene_of_interest.up <-c(\"CKM\",\"ENO3\",\"MYH3\",\"MYOG\",\"HES6\",\"DES\",\"TNNT3\",\"TPM1\",\"MEF2C\",\"CAST\",\"EIF5A\",\"ENO2\",\"NCAM1\",\"FABP3\",\"MSTN\",\"GDF11\",\"TNNT1\",\"TNNI2\")\ngene_of_interest.dn <-c(\"CCNA2\",\"CCNB2\",\"CDK1\",\"MCM4\",\"FN1\",\"MYF5\",\"ABCG2\",\"CDH15\",\"MYOD1\",\"CAV1\",\"CD34\",\"MCAM1\",\"PAX3\",\"ITGA7\",\"ITGB1\")\n\n# cumulative detection of gene of interest by simple correlation\nappear = c(match(gene_of_interest.up,names(cor_pseudotime.up)),match(gene_of_interest.dn,names(cor_pseudotime.dn)))\nappear_monocle = c(match(gene_of_interest.up,names(cor_pseudotime_monocle.up)),match(gene_of_interest.dn,names(cor_pseudotime_monocle.dn)))\nappear_monocle_rmfib = c(match(gene_of_interest.up,names(cor_pseudotime_monocle_rmfib.up)),match(gene_of_interest.dn,names(cor_pseudotime_monocle_rmfib.dn)))\nappear_monocle_top1000 = c(match(gene_of_interest.up,names(cor_pseudotime_monocle_top1000.up)),match(gene_of_interest.dn,names(cor_pseudotime_monocle_top1000.dn)))\nappear_ran = c(match(gene_of_interest.up,sample(names(cor_pseudotime))),match(gene_of_interest.dn,sample(names(cor_pseudotime))))\n\nbreaks = seq(0, 500, by=10)\nappear.cut = cut(appear, breaks, right=FALSE); appear_monocle.cut = cut(appear_monocle, breaks, right=FALSE); appear_monocle_rmfib.cut = cut(appear_monocle_rmfib, breaks, right=FALSE); appear_monocle_top1000.cut = cut(appear_monocle_top1000, breaks, right=FALSE); appear_ran.cut = cut(appear_ran, breaks, right=FALSE);\n\nappear.freq = table(appear.cut); appear_monocle.freq = table(appear_monocle.cut); appear_monocle_rmfib.freq = table(appear_monocle_rmfib.cut); appear_monocle_top1000.freq = table(appear_monocle_top1000.cut); appear_ran.freq = table(appear_ran.cut)\n\nappear.cumfreq = cumsum(appear.freq); appear_monocle.cumfreq = cumsum(appear_monocle.freq); appear_monocle_rmfib.cumfreq = cumsum(appear_monocle_rmfib.freq); appear_monocle_top1000.cumfreq = cumsum(appear_monocle_top1000.freq); appear_ran.cumfreq = cumsum(appear_ran.freq)\n\ncumrelfreq0 = c(0, appear.cumfreq); cumrelfreq0_monocle = c(0, appear_monocle.cumfreq); cumrelfreq0_monocle_rmfib = c(0, appear_monocle_rmfib.cumfreq); cumrelfreq0_monocle_top1000 = c(0, appear_monocle_top1000.cumfreq); cumrelfreq0_ran = c(0, appear_ran.cumfreq)\n\nplot(breaks, cumrelfreq0, main=\"Waterfall_vs_Monocle\", xlab=\"ranked by positive correlation\", ylab=\"Cumulative skeletal muscle development genes\",ylim=c(0,20),pch=19) #filled circle\npoints(breaks, cumrelfreq0_monocle,pch=2) # open up triangle\n#points(breaks, cumrelfreq0_monocle_rmfib,pch=3) # plus sign\npoints(breaks, cumrelfreq0_monocle_top1000,pch=4) # x\npoints(breaks, cumrelfreq0_ran,pch=6) # open down tri\nlines(breaks, cumrelfreq0)\nlines(breaks, cumrelfreq0_monocle)\n#lines(breaks, cumrelfreq0_monocle_rmfib)\nlines(breaks, cumrelfreq0_monocle_top1000)\nlines(breaks, cumrelfreq0_ran)\n\n# UP and DOWN genes\nall_bg <-all_bg[,match(rownames(pseudotime.df)[rownames(pseudotime.df) %in% colnames(all_bg)],colnames(all_bg))]\nnegcor.idx <-head(order(cor_pseudotime,decreasing=F),200); n_name <-rownames(all_bg)[negcor.idx]; n_name_qual <-rownames(all_bg)[negcor.idx][which(apply(all_bg[negcor.idx,],1,function(X){sort(X,decreasing=T)[ncol(all_bg)/20]>25}))]; negcor.idx <-match(n_name_qual,rownames(all_bg))\nposcor.idx <-head(order(cor_pseudotime,decreasing=T),200); p_name <-rownames(all_bg)[poscor.idx]; p_name_qual <-rownames(all_bg)[poscor.idx][which(apply(all_bg[poscor.idx,],1,function(X){sort(X,decreasing=T)[ncol(all_bg)/20]>25}))]; poscor.idx <-match(p_name_qual,rownames(all_bg))\n\nwrite.table(p_name_qual,file=\"on_200.txt\",quote=F,row.names=F,col.names=F)\nwrite.table(n_name_qual,file=\"off_200.txt\",quote=F,row.names=F,col.names=F)\n\n# Quantitative comparison between Waterfall and Monocle by total distance of process\n#### Permutation ####\n# to compare, we have to match the number of single cells in the calculation, so we only counted single cells that appear in every analysis\n# start from Monocle's original order from the paper\ndata(HSMM)\nHSMM_pdata <-pData(HSMM)[order(pData(HSMM)$Pseudotime),]\nHSMM_pdata <-HSMM_pdata[HSMM_pdata$State!=3,]\n\nHSMM_pseudotime.id <-rownames(HSMM_pdata)\nWaterfall_pseudotime.id <-rownames(pseudotime.df)\n\noverlapping <-HSMM_pseudotime.id[HSMM_pseudotime.id %in% Waterfall_pseudotime.id]\n\nHSMM_pseudotime.id <-HSMM_pseudotime.id[HSMM_pseudotime.id %in% overlapping]\nWaterfall_pseudotime.id <-Waterfall_pseudotime.id[Waterfall_pseudotime.id %in% overlapping]\n\nlibrary(foreach); library(doMC)\nregisterDoMC(10)\n\nall_sub <-all[,match(Waterfall_pseudotime.id,colnames(all))]\ndist_tpm.mtx <-as.matrix(dist(t(all_sub)))\ntraveling.mtx <-matrix(c(0,rep(c(1,rep(0,ncol(dist_tpm.mtx))),ncol(dist_tpm.mtx)-1)),byrow=T,ncol=ncol(dist_tpm.mtx))\ndistance_Waterfall <-c(sum(dist_tpm.mtx * traveling.mtx))\n\nall_sub <-all[,match(HSMM_pseudotime.id,colnames(all))]\ndist_tpm.mtx <-as.matrix(dist(t(all_sub)))\ntraveling.mtx <-matrix(c(0,rep(c(1,rep(0,ncol(dist_tpm.mtx))),ncol(dist_tpm.mtx)-1)),byrow=T,ncol=ncol(dist_tpm.mtx))\ndistance_Monocle <-c(sum(dist_tpm.mtx * traveling.mtx))\n\ndistance_permuted <-c()\nn_permut=0\nwhile (n_permut<5){\n    n_permut <-n_permut+1\n    distance_permuted <-c(distance_permuted,unlist(foreach(i=1:1000000) %dopar% {\n        traveling.mtx <-traveling.mtx[sample(1:ncol(traveling.mtx),ncol(traveling.mtx),replace=FALSE),]\n        sum(dist_tpm.mtx * traveling.mtx)\n    }))\n    print(min(distance_permuted))\n}\n\npnorm(distance_Waterfall, mean = mean(distance_permuted), sd = sd(distance_permuted), lower.tail = TRUE)\npnorm(distance_Monocle, mean = mean(distance_permuted), sd = sd(distance_permuted), lower.tail = TRUE)\n\nd <-density(c(distance_Waterfall,distance_Monocle,distance_permuted))\nplot(d,xlim=c(min(c(distance_Waterfall,distance_Monocle,distance_permuted)),max(distance_permuted)))\npolygon(d, col=\"black\", border=\"black\")\npoints(distance_Waterfall,0,col=\"red\")\npoints(distance_Monocle,0,col=\"green\")",
    "created" : 1517394766409.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3944919048",
    "id" : "F39D3451",
    "lastKnownWriteTime" : 1427664510,
    "last_content_update" : 1427664510,
    "path" : "~/Dropbox/thesis/tools/Waterfall/M2. Trapnell et al./Waterfall (HSMM).R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}